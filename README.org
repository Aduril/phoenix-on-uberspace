#+OPTIONS: toc:3

* Uberphoenix

Like many people I am a fan of the Hoster [[https://uberspace.de][Uberspace]]. If you don't know them and you are looking for a flexible hoster to try out new things, consider joining them. They have a first rate support and a price range starting at 5â‚¬. This low price comes with... well, a price: It's a shared hoster, hence you will have to do some things a bit different. :)

I'm also a fan of Elixir and the PhoenixFramework. This repositories shows you one way how to setup a Phoenix Application within uberspace.

** Preparing your Uberspace
*** Setup Postgres

Basically what I did was following the instructions from the [[https://lab.uberspace.de/guide_postgresql/][Postgresql Manual Page]].

These were my exact steps, after sshing to my uberspace:
#+BEGIN_SRC bash
  uberspace tools version use postgresql 13
  openssl rand -hex 32 > ~/pgpass.temp
  echo "*:*:*:$(whoami):$(cat ~/pgpass.temp)" > ~/.pgpass # you can and probably SHOULD edit the 3 stars at the beginning - google for pgpass file for more information
  chmod 0600 ~/.pgpass  
  initdb --pwfile ~/pgpass.temp --auth=scram-sha-256 -E UTF8 -D ~/opt/postgresql/data/
  rm ~/pgpass.temp
  echo 'export PGPASSFILE=$HOME/.pgpass' >> ~/.bash_profile
  echo 'export PGHOST=localhost' >> ~/.bash_profile
  echo 'export PGPORT=5432' >> ~/.bash_profile
  source ~./bash_profile
  cp ~/opt/postgresql/data/postgresql.conf ~/opt/postgresql/data/postgresql.conf_bak # safety backup in case the following sed is broken :)
  sed -i "s/^unix_socket_directories =.*/unix_socket_directories = '\/home\/$(whoami)\/tmp'/g" # sed to change unix_socket_directories
  # Create an ini file
  touch ~/etc/services.d/postgresql.ini
  echo "[program:postgresql]"                                  >> ~/etc/services.d/postgresql.ini
  echo "command=postgres -D %(ENV_HOME)s/opt/postgresql/data/" >> ~/etc/services.d/postgresql.ini
  echo "autostart=yes"                                         >> ~/etc/services.d/postgresql.ini
  echo "autorestart=yes"                                       >> ~/etc/services.d/postgresql.ini
  echo "startsec=15"                                           >> ~/etc/services.d/postgresql.ini
  supervisorctl reread
  supervisorctl update
#+END_SRC

After that you should have a running postgres database. Be aware that the user will me your uberspace user, not the default ~postgres~

*** Setup OTP and Elixir

Updating your Elixir is done by updating the OTP version for your account by running:


#+BEGIN_SRC bash
  uberspace tools version use erlang 24
#+END_SRC

There is currently no way to use elixir in a specific version on Uberspace. But you could probably build it from source if you really want to.

*** Setup the Environment
Before we go into the core of the application, we will setup some environment variables within our uberspace. Let's create a local env file

#+BEGIN_SRC bash
  touch ~/.uberphoenix_env
  echo 'export PHX_HOST=example.com'              >> ~/.uberphoenix_env # enter your domain
  echo 'export PHX_PORT=1337'                     >> ~/.uberphoenix_env # enter a port you want your backend to run, 1337 is just an example here
  echo 'export PHX_SECRET_KEY_BASE=YOURSECRETKEY' >> ~/.uberphoenix_env # some secret key, can be be generated by `mix phx.gen.secret`
  echo 'export PHX_PATH=/YOUR/PATH'               >> ~/.uberphoenix_env # if you want to setup a specific path for your application, default should be "/"
  echo 'export PHX_LIVE_PATH=/YOUR/PATH'          >> ~/.uberphoenix_env # Add this only if you want to have your whole application within a subdirectory
  echo 'export MIX_ENV=prod'                      >> ~/.uberphoenix_env
  echo 'source $HOME/.uberphoenix_env'     >> ~/.bash_profile
  source ~/.bash_profile
#+END_SRC

*** Setup a Backend

On a shared hoster it's hard to deploy your Application on the default ports for http or https. Luckily Uberspace offers a way around by its [[https://manual.uberspace.de/web-backends/][Web Backend Tooling]].
It offers you a way to setup your Application with any port and forward web traffic to that port.

If the phoenix application is the only thing that shoudl take http requests within your account you can just run the following snippet and be done.

#+BEGIN_SRC bash
  uberspace web backend set / --http --port "$PHX_PORT"
#+END_SRC

Now you have a backend that listens to https and http calls and refers these to your phoenix application.

**** Running Phoenix And Other Applications

Many Uberspace users will have multiple tools within their account and they don't want the Phoenix Application to be the only thing reachable from outside.
Luckily Uberspace has you covered by one of two methods: you can either provide a specific subdomain for your Application or you specify a path for your Application.

***** Solution 1: Setup a Subdomain

If you have a specific Subdomain, just put it into your ~.uberphoenix_env~ as the ~PHX_HOST~ and run the following snippet:

#+BEGIN_SRC bash
  uberspace web backend set "$PHX_HOST" --http --port "$PHX_PORT"
#+END_SRC

***** Solution 2: Setup Phoenix for a specific path

You can setup a path by giving the uberspace tool your specific ~PHX_PATH~

#+BEGIN_SRC bash
  uberspace web backend set "$PHX_PATH" --http --port "$PHX_PORT"
#+END_SRC

If you are using Phoenix LiveView, you should as well add the path ~/live~ as well.

#+BEGIN_SRC bash
  uberspace web backend set /live --http --port "$PHX_PORT"
#+END_SRC

Sometimes this will not be enough, e.g. if you like to run multiple Phoenix Instances within your uberspace account.

If this is the case, or you just want to handle everything within a specific route, you can change the route ~/live~ within your application (probably in ~lib/uberphoenix/endpoint.ex~ and ~assets/js/app.js~) and prefix it with your path.

You can also use the functionality of this repository:
add the variable ~PHX_LIVE_PATH~ to your env, containing your path (could also be set to ~PHX_PATH~.

If you do this you will have to replace the live route within the ~app.js~. This following sed snippet should do this for you

#+BEGIN_SRC bash
  sed -i "s/\"\/live\"/\""${PHX_LIVE_PATH//\//\\/}"\/live\"/" assets/js/app.js
#+END_SRC

If you had your app running before, do not forget to run a ~mix phx.digest~ after this change

** Test Run for Your Phoenix Application

Run the default script

#+BEGIN_SRC bash
  mix deps.get
  mix phx.digest
  mix ecto.setup
  mix phx.server
#+END_SRC

After this your server should be ready to use.

** TODO Continuous Deployment

To be added :)

*** How to run the project automatically

I simply added a file named ~\~/etc/services.d/uberphoenix.ini~ with the following content:

#+BEGIN_SRC
[program:uberphoenix]
user=<YOURUSER>
directory=%(ENV_HOME)s/THE/PATH/TO/YOUR/PROJECT
command=%(ENV_HOME)s/THE/PATH/TO/YOUR/PROJECT/scripts/start.sh
autostart=yes
autorestart=yes
startsec=60
stopsignal=KILL
stopasgroup=true
#+END_SRC

The start script simply loads the ~.env~ file

#+BEGIN_SRC bash
  source $HOME/.uberphoenix_env
  mix phx.server
#+END_SRC

Start the process by running

#+BEGIN_SRC bash
  supervisorctl reread; supervisorctl update; supervisorctl tail -f uberphoenix
#+END_SRC

If you want to experiment with the ~.ini~ file and want to have a fast feedback loop run the following snippet after changing the file:

#+BEGIN_SRC bash
  supervisorctl stop uberphoenix; supervisorctl remove uberphoenix; supervisorctl reread; supervisorctl update; supervisorctl tail -f uberphoenix;
#+END_SRC

*** Automate deployment

Simplest way to automate the deployment is to add a cronjob that fetches new changes on your main branch. A simple example can be found in [[file:scripts/cron.sh][scripts/cron.sh]]. It includes a short downtime for your project while it's compiling and the migrations are running. Feel free to exapnd from here.

** Troubleshooting

In general: Just fiddle around and try some stuff. In severe cases open an issue. Otherwise I will add known issues down here:

*** The application says it's already running

I noticed that sometimes the shutdown of the service is not done properly. If so, just run

#+BEGIN_SRC  bash
  kill -9 $(lsof -t -i tcp:$PHX_PORT)
#+END_SRC

